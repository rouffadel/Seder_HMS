using System;
using System.Linq;
using System.Web.UI.WebControls;
using System.Data;
using DataAccessLayer;
using Microsoft.ApplicationBlocks.Data;
//using CompanyDac;
using DataAccessLayer;
using HumanResource;

public partial class AddVehicle : AECLOGIC.ERP.COMMON.WebFormMaster
{
    int mid = 0; bool viewall; string menuname; string menuid;
    #region LoadEvents
    //DataAccessLayer.SRN objSRN = new DataAccessLayer.SRN();
    SRN objSRN = new SRN();
   // Common obj = new Common();
    //DataAccessLayer.Common objCommon = new DataAccessLayer.Common();

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            string id =  Convert.ToInt32(Session["UserId"]).ToString();
        }
        catch
        {
            Response.Redirect("Home.aspx");
        }
        topmenu.MenuId = GetParentMenuId();
        topmenu.ModuleId = Convert.ToInt32(Application["ModuleId"].ToString());
        topmenu.RoleID = Convert.ToInt32(Session["RoleId"].ToString());
        topmenu.SelectedMenu = Convert.ToInt32(mid.ToString());
        topmenu.DataBind();
        Session["menuname"] = menuname;
         Session["menuid"] = menuid; Session["MId"] = mid;
        if (!IsPostBack)
        {
            
            SetUpScreen();
        }
    }

    protected override void OnInit(EventArgs e)
    {
	 base.OnInit(e);
        TasksPaging.FirstClick += new Paging.PageFirst(TasksPaging_FirstClick);
        TasksPaging.PreviousClick += new Paging.PagePrevious(TasksPaging_FirstClick);
        TasksPaging.NextClick += new Paging.PageNext(TasksPaging_FirstClick);
        TasksPaging.LastClick += new Paging.PageLast(TasksPaging_FirstClick);
        TasksPaging.ChangeClick += new Paging.PageChange(TasksPaging_FirstClick);
        TasksPaging.ShowRowsClick += new Paging.ShowRowsChange(TasksPaging_ShowRowsClick);
    }
    #endregion LoadEvents

    #region GridPaging

    void TasksPaging_ShowRowsClick(object sender, EventArgs e)
    {
        TasksPaging.CurrentPage = 1;
        BindPager();
    }

    void BindPager()
    {
        objSRN.CurrentPage = TasksPaging.CurrentPage;
        objSRN.PageSize = TasksPaging.ShowRows;
        GridBind(objSRN);
    }
    void TasksPaging_FirstClick(object sender, EventArgs e)
    {
        BindPager();
    }
    
    private void GridBind(SRN objCommon)
    {
        objSRN.PageSize = TasksPaging.ShowRows; ;
        objSRN.CurrentPage = TasksPaging.CurrentPage;
        DataSet dsMMS_Coding = objSRN.GetMMS_gvVehicle(objCommon);
        if (dsMMS_Coding != null && dsMMS_Coding.Tables.Count != 0 && dsMMS_Coding.Tables[0].Rows.Count > 0)
        {
            gvVehicle.DataSource = dsMMS_Coding;
            gvVehicle.DataBind();
        }
        TasksPaging.Bind(objCommon.CurrentPage,objCommon.TotalPages, objCommon.NoofRecords);//, objCommon.PageSize);
    }
    #endregion GridPaging

    #region SetUpScreen
    private void SetUpScreen()
    {
        FillDriverDetails();
        objSRN.CurrentPage = TasksPaging.CurrentPage;
        //objSRN.PageSize = Config.ShowRows;
        //TasksPaging.ShowRows = Config.ShowRows;
        GridBind(objSRN);
    }
    private void FillDriverDetails()
    {
        FIllObject.FillDropDown(ref ddlDriver, "MMS_DDL_Drivers");
        ddlDriver.Items.Add(new ListItem("Select Driver", "-1"));
       // ddlDriver.DataSource = LookUp.PopulateEntityDropDown(LookUp.EntityRelationships.Drivers);
        ddlDriver.DataBind();
    }
    #endregion SetUpScreen

    #region OnClick
    protected void btnSaveVehicle_OnClick(object sender, EventArgs e)
    {
        
           int DrId;string VehName;string VehType;string VehRegnNr;DateTime CreatedOn;int CreatedBy ;
            bool isNewRecord = btnSaveVehicle.Text.Trim().ToLower().Contains("save");
           
            string RecordIDText = uxID.Text;
            if (isNewRecord)
            {
              //CreatedBy = Convert.ToInt32(Session["LoginId"]);
              //CreatedOn = DateTime.Now;
            }
            else
            {
               // vh = (from s in dc.T_MMS_TptVehicles.Where(a => a.VId == int.Parse(RecordIDText)) select s).SingleOrDefault();
                trID.Visible = false;
                btnSaveVehicle.Text = "Save";
            }
            CreatedBy = Convert.ToInt32(Session["LoginId"]);
            CreatedOn = DateTime.Now;
            DrId = int.Parse(ddlDriver.SelectedValue);
            VehName = txtVehicleName.Text == null ? "" : txtVehicleName.Text.Trim();
            VehType = ddlVehicleType.SelectedItem.Text == null ? "" : ddlVehicleType.SelectedItem.Text.Trim();
            VehRegnNr = txtVehicleNo.Text.Trim() + " ," + txtVehicleRegisterNo.Text.Trim();
            objSRN.MMS_AddVehicle(DrId, VehName, VehType, VehRegnNr, CreatedOn, CreatedBy);
    
        AlertMsg.MsgBox(Page, "Record Added.!");

            string strScript = "<script language='javascript' type='text/javascript'> window.close(); </script>";
            ClientScript.RegisterStartupScript(typeof(System.Web.UI.Page), "PopupCP", strScript);

            Session["NewDriver"] = 1;
            objSRN.CurrentPage = TasksPaging.CurrentPage;
            objSRN.PageSize = TasksPaging.ShowRows;
            GridBind(objSRN);
            //}
            //else
            //    AlertMsg.MsgBox(Page, "Record Already Exists");
        //}
        //  GridBind();//int? ni = null;
    }
    #endregion OnClick

    #region OnRowCommand
    protected void Grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        if (e.CommandName == "Edt")
        {
            trID.Visible = true;
            //GridViewRow row = (GridViewRow)((ButtonField)e.CommandSource).Parent.Parent;
            string RecordIDText = e.CommandArgument.ToString().Replace("&nbsp;", "");
            int VId=Convert.ToInt32(e.CommandArgument.ToString().Replace("&nbsp;", ""));
            DataSet ds = new DataSet();
            ds = objSRN.MMS_GetVehicle(VId);
            if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                uxID.Text = ds.Tables[0].Rows[0]["VId"].ToString();
                ddlDriver.SelectedValue = ds.Tables[0].Rows[0]["DrId"].ToString();
                string VehRegNo = ds.Tables[0].Rows[0]["VehRegnNr"].ToString();
                string[] strSplit = VehRegNo.Split(new char[] { ',' });
                if (strSplit.Length > 0)
                    txtVehicleRegisterNo.Text = strSplit[0];
                if (strSplit.Length > 1)
                    txtVehicleNo.Text = strSplit[1];
                txtVehicleName.Text = ds.Tables[0].Rows[0]["VehName"].ToString();
                if (ds.Tables[0].Rows[0]["VehType"].ToString() == "")
                    ddlVehicleType.SelectedValue = "0";
                else
                    ddlVehicleType.SelectedItem.Text = ds.Tables[0].Rows[0]["VehType"].ToString();
            }
               
               
               
                btnSaveVehicle.Text = "Update";
            
        }
    }
    #endregion OnRowCommand
    #region MyMethods
      public int GetParentMenuId()
    {
        int Id;
        if (Session["Guest"] != null)
            Id = 2;
        else
            Id = 1;
        string URL = Request.Url.Segments[Request.Url.Segments.Length - 1] + Request.Url.Query;
        int RoleId = Convert.ToInt32(Session["RoleId"].ToString());
        int ModuleId = Convert.ToInt32(Application["ModuleId"].ToString());

        DataSet ds = new DataSet();

        //ds = Common.GetAllowed(RoleId, ModuleId, URL, Id);
        ds = AttendanceDAC.GetAllowed(RoleId, ModuleId, URL);
        int MenuId = 0;
        if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
            MenuId = Convert.ToInt32(ds.Tables[0].Rows[0]["Under"]);
            menuname = ds.Tables[0].Rows[0]["menuname"].ToString();
            menuid = MenuId.ToString();
            mid = Convert.ToInt32(ds.Tables[0].Rows[0]["MenuId"].ToString());
            ViewState["Editable"] = (bool)ds.Tables[0].Rows[0]["Editable"];
            ViewState["ViewAll"] = (bool)ds.Tables[0].Rows[0]["ViewAll"];
        }
        return MenuId;
    }

    #endregion MyMethods
}